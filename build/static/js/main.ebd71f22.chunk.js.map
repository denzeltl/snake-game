{"version":3,"sources":["constants.js","App.js","useInterval.js","index.js"],"names":["CANVAS_SIZE","SNAKE_START","APPLE_START","DIRECTIONS","38","40","37","39","App","canvasRef","useRef","useState","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameover","setGameover","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","newSnake","newApple","checkAppleCollision","pop","useEffect","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","keyCode","moveSnake","style","border","ref","width","height","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebd71f22.chunk.js","sourcesContent":["const CANVAS_SIZE = [800, 800];\r\nconst SNAKE_START = [\r\n    [8, 7],\r\n    [8, 8],\r\n];\r\nconst APPLE_START = [8, 3];\r\nconst SCALE = 40;\r\nconst SPEED = 100;\r\nconst DIRECTIONS = {\r\n    38: [0, -1], // up\r\n    40: [0, 1], // down\r\n    37: [-1, 0], // left\r\n    39: [1, 0], // right\r\n};\r\n\r\nexport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useInterval } from './useInterval';\r\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\r\n\r\nconst App = () => {\r\n    const canvasRef = useRef();\r\n    const [snake, setSnake] = useState(SNAKE_START);\r\n    const [apple, setApple] = useState(APPLE_START);\r\n    const [dir, setDir] = useState([0, -1]);\r\n    const [speed, setSpeed] = useState(null);\r\n    const [gameover, setGameover] = useState(false);\r\n\r\n    const startGame = () => {\r\n        setSnake(SNAKE_START);\r\n        setApple(APPLE_START);\r\n        setDir([0, -1]);\r\n        setSpeed(SPEED);\r\n        setGameover(false);\r\n    };\r\n\r\n    const endGame = () => {\r\n        setSpeed(null);\r\n        setGameover(true);\r\n    };\r\n\r\n    const moveSnake = ({ keyCode }) => {\r\n        keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\r\n    };\r\n\r\n    const createApple = () => apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\r\n\r\n    const checkCollision = (piece, snk = snake) => {\r\n        if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) {\r\n            return true;\r\n        }\r\n\r\n        for (const segment of snk) {\r\n            if (piece[0] === segment[0] && piece[1] === segment[1]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const checkAppleCollision = (newSnake) => {\r\n        if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\r\n            let newApple = createApple();\r\n            while (checkCollision(newApple, newSnake)) {\r\n                newApple = createApple();\r\n            }\r\n\r\n            setApple(newApple);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const gameLoop = () => {\r\n        const snakeCopy = JSON.parse(JSON.stringify(snake));\r\n        const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\r\n        snakeCopy.unshift(newSnakeHead);\r\n        if (checkCollision(newSnakeHead)) {\r\n            endGame();\r\n        }\r\n        if (!checkAppleCollision(snakeCopy)) {\r\n            snakeCopy.pop();\r\n        }\r\n        setSnake(snakeCopy);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n        context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\r\n        context.fillStyle = 'green';\r\n        snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n        context.fillStyle = 'red';\r\n        context.fillRect(apple[0], apple[1], 1, 1);\r\n    }, [snake, apple, gameover]);\r\n\r\n    useInterval(() => gameLoop(), speed);\r\n\r\n    return (\r\n        <div role=\"button\" tabIndex=\"0\" onKeyDown={(e) => moveSnake(e)}>\r\n            <canvas style={{ border: '1px solid black' }} ref={canvasRef} width={`${CANVAS_SIZE[0]}px`} height={`${CANVAS_SIZE[1]}px`} />\r\n            {gameover && <div>GAME OVER!</div>}\r\n            <button onClick={startGame}>Start Game</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// Custom Hook by Dan Abramov\r\nimport { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}