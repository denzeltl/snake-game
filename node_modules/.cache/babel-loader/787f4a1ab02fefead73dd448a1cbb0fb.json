{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\denze\\\\Desktop\\\\Projects\\\\snake-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"C:\\\\Users\\\\denze\\\\Desktop\\\\Projects\\\\snake-game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import{useInterval}from'./useInterval';import{CANVAS_SIZE,SNAKE_START,APPLE_START,SCALE,SPEED,DIRECTIONS}from'./constants';var App=function App(){var canvasRef=useRef();var _useState=useState(SNAKE_START),_useState2=_slicedToArray(_useState,2),snake=_useState2[0],setSnake=_useState2[1];var _useState3=useState(APPLE_START),_useState4=_slicedToArray(_useState3,2),apple=_useState4[0],setApple=_useState4[1];var _useState5=useState([0,-1]),_useState6=_slicedToArray(_useState5,2),dir=_useState6[0],setDir=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),speed=_useState8[0],setSpeed=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),gameover=_useState10[0],setGameover=_useState10[1];var startGame=function startGame(){setSnake(SNAKE_START);setApple(APPLE_START);setDir([0,-1]);setSpeed(SPEED);setGameover(false);};var endGame=function endGame(){setSpeed(null);setGameover(true);};var moveSnake=function moveSnake(_ref){var keyCode=_ref.keyCode;keyCode>=37&&keyCode<=40&&setDir(DIRECTIONS[keyCode]);};var createApple=function createApple(){return apple.map(function(_a,i){return Math.floor(Math.random()*(CANVAS_SIZE[i]/SCALE));});};var checkCollision=function checkCollision(piece){var snk=arguments.length>1&&arguments[1]!==undefined?arguments[1]:snake;if(piece[0]*SCALE>=CANVAS_SIZE[0]||piece[0]<0||piece[1]*SCALE>=CANVAS_SIZE[1]||piece[1]<0){return true;}var _iterator=_createForOfIteratorHelper(snk),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var segment=_step.value;if(piece[0]===segment[0]&&piece[1]===segment[1]){return true;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return false;};var checkAppleCollision=function checkAppleCollision(newSnake){if(newSnake[0][0]===apple[0]&&newSnake[0][1]===apple[1]){var newApple=createApple();while(checkCollision(newApple,newSnake)){newApple=createApple();}setApple(newApple);return true;}return false;};var gameLoop=function gameLoop(){var snakeCopy=JSON.parse(JSON.stringify(snake));var newSnakeHead=[snakeCopy[0][0]+dir[0],snakeCopy[0][1]+dir[1]];snakeCopy.unshift(newSnakeHead);if(checkCollision(newSnakeHead)){endGame();}if(!checkAppleCollision(snakeCopy)){snakeCopy.pop();}setSnake(snakeCopy);};useEffect(function(){var context=canvasRef.current.getContext('2d');context.setTransform(SCALE,0,0,SCALE,0,0);context.clearRect(0,0,CANVAS_SIZE[0],CANVAS_SIZE[1]);context.fillStyle='green';snake.forEach(function(_ref2){var _ref3=_slicedToArray(_ref2,2),x=_ref3[0],y=_ref3[1];return context.fillRect(x,y,1,1);});context.fillStyle='red';context.fillRect(apple[0],apple[1],1,1);},[snake,apple,gameover]);useInterval(function(){return gameLoop();},speed);return/*#__PURE__*/React.createElement(\"div\",{role:\"button\",tabIndex:\"0\",onKeyDown:function onKeyDown(e){return moveSnake(e);}},/*#__PURE__*/React.createElement(\"canvas\",{style:{border:'1px solid black'},ref:canvasRef,width:\"\".concat(CANVAS_SIZE[0],\"px\"),height:\"\".concat(CANVAS_SIZE[1],\"px\")}),gameover&&/*#__PURE__*/React.createElement(\"div\",null,\"GAME OVER!\"),/*#__PURE__*/React.createElement(\"button\",{onClick:startGame},\"Start Game\"));};export default App;","map":{"version":3,"sources":["C:/Users/denze/Desktop/Projects/snake-game/src/App.js"],"names":["React","useState","useEffect","useRef","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameover","setGameover","startGame","endGame","moveSnake","keyCode","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useInterval } from './useInterval';\r\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\r\n\r\nconst App = () => {\r\n    const canvasRef = useRef();\r\n    const [snake, setSnake] = useState(SNAKE_START);\r\n    const [apple, setApple] = useState(APPLE_START);\r\n    const [dir, setDir] = useState([0, -1]);\r\n    const [speed, setSpeed] = useState(null);\r\n    const [gameover, setGameover] = useState(false);\r\n\r\n    const startGame = () => {\r\n        setSnake(SNAKE_START);\r\n        setApple(APPLE_START);\r\n        setDir([0, -1]);\r\n        setSpeed(SPEED);\r\n        setGameover(false);\r\n    };\r\n\r\n    const endGame = () => {\r\n        setSpeed(null);\r\n        setGameover(true);\r\n    };\r\n\r\n    const moveSnake = ({ keyCode }) => {\r\n        keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\r\n    };\r\n\r\n    const createApple = () => apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\r\n\r\n    const checkCollision = (piece, snk = snake) => {\r\n        if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) {\r\n            return true;\r\n        }\r\n\r\n        for (const segment of snk) {\r\n            if (piece[0] === segment[0] && piece[1] === segment[1]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const checkAppleCollision = (newSnake) => {\r\n        if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\r\n            let newApple = createApple();\r\n            while (checkCollision(newApple, newSnake)) {\r\n                newApple = createApple();\r\n            }\r\n\r\n            setApple(newApple);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const gameLoop = () => {\r\n        const snakeCopy = JSON.parse(JSON.stringify(snake));\r\n        const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\r\n        snakeCopy.unshift(newSnakeHead);\r\n        if (checkCollision(newSnakeHead)) {\r\n            endGame();\r\n        }\r\n        if (!checkAppleCollision(snakeCopy)) {\r\n            snakeCopy.pop();\r\n        }\r\n        setSnake(snakeCopy);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n        context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\r\n        context.fillStyle = 'green';\r\n        snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n        context.fillStyle = 'red';\r\n        context.fillRect(apple[0], apple[1], 1, 1);\r\n    }, [snake, apple, gameover]);\r\n\r\n    useInterval(() => gameLoop(), speed);\r\n\r\n    return (\r\n        <div role=\"button\" tabIndex=\"0\" onKeyDown={(e) => moveSnake(e)}>\r\n            <canvas style={{ border: '1px solid black' }} ref={canvasRef} width={`${CANVAS_SIZE[0]}px`} height={`${CANVAS_SIZE[1]}px`} />\r\n            {gameover && <div>GAME OVER!</div>}\r\n            <button onClick={startGame}>Start Game</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}