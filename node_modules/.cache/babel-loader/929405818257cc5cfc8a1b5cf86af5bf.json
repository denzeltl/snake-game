{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denze\\\\Desktop\\\\Projects\\\\snake-game\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport useInterval from './useInterval';\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameover, setGameover] = useState(false);\n\n  const startGame = () => {};\n\n  const endGame = () => {};\n\n  const moveSnake = () => {};\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = 'green';\n  }, [snake, apple, gameover]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: '1px solid black'\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }), gameover && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 26\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/denze/Desktop/Projects/snake-game/src/App.js"],"names":["React","useState","useEffect","useRef","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameover","setGameover","startGame","endGame","moveSnake","context","current","getContext","setTransform","clearRect","fillStyle","e","border"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,WAAnC,EAAgDC,KAAhD,EAAuDC,KAAvD,EAA8DC,UAA9D,QAAgF,aAAhF;;AAEA,MAAMC,GAAG,GAAG,MAAM;AACd,QAAMC,SAAS,GAAGT,MAAM,EAAxB;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACK,WAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACM,WAAD,CAAlC;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBjB,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,CAA9B;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMsB,SAAS,GAAG,MAAM,CAAE,CAA1B;;AAEA,QAAMC,OAAO,GAAG,MAAM,CAAE,CAAxB;;AAEA,QAAMC,SAAS,GAAG,MAAM,CAAE,CAA1B;;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,OAAO,GAAGd,SAAS,CAACe,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAhB;AACAF,IAAAA,OAAO,CAACG,YAAR,CAAqBrB,KAArB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkCA,KAAlC,EAAyC,CAAzC,EAA4C,CAA5C;AACAkB,IAAAA,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBzB,WAAW,CAAC,CAAD,CAAnC,EAAwCA,WAAW,CAAC,CAAD,CAAnD;AACAqB,IAAAA,OAAO,CAACK,SAAR,GAAoB,OAApB;AACH,GALQ,EAKN,CAAClB,KAAD,EAAQE,KAAR,EAAeM,QAAf,CALM,CAAT;AAOA,sBACI;AAAK,IAAA,IAAI,EAAC,QAAV;AAAmB,IAAA,QAAQ,EAAC,GAA5B;AAAgC,IAAA,SAAS,EAAGW,CAAD,IAAOP,SAAS,CAACO,CAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAf;AAA8C,IAAA,GAAG,EAAErB,SAAnD;AAA8D,IAAA,KAAK,EAAG,GAAEP,WAAW,CAAC,CAAD,CAAI,IAAvF;AAA4F,IAAA,MAAM,EAAG,GAAEA,WAAW,CAAC,CAAD,CAAI,IAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKgB,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFjB,eAGI;AAAQ,IAAA,OAAO,EAAEE,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,CADJ;AAOH,CA5BD;;AA8BA,eAAeZ,GAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport useInterval from './useInterval';\r\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\r\n\r\nconst App = () => {\r\n    const canvasRef = useRef();\r\n    const [snake, setSnake] = useState(SNAKE_START);\r\n    const [apple, setApple] = useState(APPLE_START);\r\n    const [dir, setDir] = useState([0, -1]);\r\n    const [speed, setSpeed] = useState(null);\r\n    const [gameover, setGameover] = useState(false);\r\n\r\n    const startGame = () => {};\r\n\r\n    const endGame = () => {};\r\n\r\n    const moveSnake = () => {};\r\n\r\n    useEffect(() => {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n        context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\r\n        context.fillStyle = 'green';\r\n    }, [snake, apple, gameover]);\r\n\r\n    return (\r\n        <div role=\"button\" tabIndex=\"0\" onKeyDown={(e) => moveSnake(e)}>\r\n            <canvas style={{ border: '1px solid black' }} ref={canvasRef} width={`${CANVAS_SIZE[0]}px`} height={`${CANVAS_SIZE[1]}px`} />\r\n            {gameover && <div>GAME OVER!</div>}\r\n            <button onClick={startGame}>Start Game</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}