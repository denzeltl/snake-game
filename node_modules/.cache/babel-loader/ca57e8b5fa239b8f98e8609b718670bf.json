{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denze\\\\Desktop\\\\Projects\\\\snake-game\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useInterval } from './useInterval';\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameover, setGameover] = useState(false);\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameover(false);\n  };\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameover(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => {\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n  };\n\n  const createApple = () => {\n    apple.map((_, i) => {\n      // Math.floor((Math.random() * CANVAS_SIZE[1] / SCALE)\n      Math.floor(Math.random() * CANVAS_SIZE[i] / SCALE);\n    });\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) {\n      return true;\n    }\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n\n    if (checkCollision(newSnakeHead)) {\n      endGame();\n    }\n\n    if (!checkAppleCollision(snakeCopy)) {\n      snakeCopy.pop();\n    }\n\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = 'green';\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = 'red';\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameover]);\n  useInterval(() => gameLoop(), speed);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: '1px solid black'\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), gameover && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 26\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/denze/Desktop/Projects/snake-game/src/App.js"],"names":["React","useState","useEffect","useRef","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameover","setGameover","startGame","endGame","moveSnake","keyCode","createApple","map","_","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useInterval } from './useInterval';\r\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\r\n\r\nconst App = () => {\r\n    const canvasRef = useRef();\r\n    const [snake, setSnake] = useState(SNAKE_START);\r\n    const [apple, setApple] = useState(APPLE_START);\r\n    const [dir, setDir] = useState([0, -1]);\r\n    const [speed, setSpeed] = useState(null);\r\n    const [gameover, setGameover] = useState(false);\r\n\r\n    const startGame = () => {\r\n        setSnake(SNAKE_START);\r\n        setApple(APPLE_START);\r\n        setDir([0, -1]);\r\n        setSpeed(SPEED);\r\n        setGameover(false);\r\n    };\r\n\r\n    const endGame = () => {\r\n        setSpeed(null);\r\n        setGameover(true);\r\n    };\r\n\r\n    const moveSnake = ({ keyCode }) => {\r\n        keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\r\n    };\r\n\r\n    const createApple = () => {\r\n        apple.map((_, i) => {\r\n            // Math.floor((Math.random() * CANVAS_SIZE[1] / SCALE)\r\n            Math.floor((Math.random() * CANVAS_SIZE[i]) / SCALE);\r\n        });\r\n    };\r\n\r\n    const checkCollision = (piece, snk = snake) => {\r\n        if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) {\r\n            return true;\r\n        }\r\n\r\n        for (const segment of snk) {\r\n            if (piece[0] === segment[0] && piece[1] === segment[1]) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const checkAppleCollision = (newSnake) => {\r\n        if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\r\n            let newApple = createApple();\r\n            while (checkCollision(newApple, newSnake)) {\r\n                newApple = createApple();\r\n            }\r\n\r\n            setApple(newApple);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const gameLoop = () => {\r\n        const snakeCopy = JSON.parse(JSON.stringify(snake));\r\n        const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\r\n        snakeCopy.unshift(newSnakeHead);\r\n        if (checkCollision(newSnakeHead)) {\r\n            endGame();\r\n        }\r\n        if (!checkAppleCollision(snakeCopy)) {\r\n            snakeCopy.pop();\r\n        }\r\n        setSnake(snakeCopy);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const context = canvasRef.current.getContext('2d');\r\n        context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n        context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\r\n        context.fillStyle = 'green';\r\n        snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n        context.fillStyle = 'red';\r\n        context.fillRect(apple[0], apple[1], 1, 1);\r\n    }, [snake, apple, gameover]);\r\n\r\n    useInterval(() => gameLoop(), speed);\r\n\r\n    return (\r\n        <div role=\"button\" tabIndex=\"0\" onKeyDown={(e) => moveSnake(e)}>\r\n            <canvas style={{ border: '1px solid black' }} ref={canvasRef} width={`${CANVAS_SIZE[0]}px`} height={`${CANVAS_SIZE[1]}px`} />\r\n            {gameover && <div>GAME OVER!</div>}\r\n            <button onClick={startGame}>Start Game</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}